/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// Search1 struct for Search1
type Search1 struct {
	// The names of the Elasticsearch indices in which to search.
	Indices []Index `json:"indices"`
	QueryType *QueryType `json:"queryType,omitempty"`
	QueryVersion NullableString `json:"queryVersion,omitempty"`
	Query *Query `json:"query,omitempty"`
	// The search query using the Elasticsearch [Query DSL](https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl.html) syntax.
	QueryDsl map[string]interface{} `json:"queryDsl,omitempty"`
	TypeAheadQuery *TypeAheadQuery `json:"typeAheadQuery,omitempty"`
	// Indicates whether nested objects from returned search results should be included.
	IncludeNested *bool `json:"includeNested,omitempty"`
	QueryResultFilter *QueryResultFilter `json:"queryResultFilter,omitempty"`
	AggregationType *AggregationType `json:"aggregationType,omitempty"`
	AggregationsVersion NullableString `json:"aggregationsVersion,omitempty"`
	// The aggregation search query using Elasticsearch [Aggregations](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/search-aggregations.html) syntax.
	AggregationsDsl map[string]interface{} `json:"aggregationsDsl,omitempty"`
	Aggregations *Aggregation1 `json:"aggregations,omitempty"`
	// The fields to be used to sort the search results. Use + or - to specify the sort direction.
	Sort []string `json:"sort,omitempty"`
	// Used to begin the search window at the values specified. This parameter consists of the last values of the sorted fields in the current record set. This is used to expand the Elasticsearch limit of 10K records by shifting the 10K window to begin at this value. For example, when searching for identities, if the last idenitity ID in the search result is 2c91808375d8e80a0175e1f88a575221, then using that ID in this property will start a new search after this identity.
	SearchAfter []string `json:"searchAfter,omitempty"`
	// The filters to be applied for each filtered field name.
	Filters *map[string]Filter `json:"filters,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Search1 Search1

// NewSearch1 instantiates a new Search1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearch1(indices []Index) *Search1 {
	this := Search1{}
	this.Indices = indices
	return &this
}

// NewSearch1WithDefaults instantiates a new Search1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearch1WithDefaults() *Search1 {
	this := Search1{}
	return &this
}

// GetIndices returns the Indices field value
func (o *Search1) GetIndices() []Index {
	if o == nil {
		var ret []Index
		return ret
	}

	return o.Indices
}

// GetIndicesOk returns a tuple with the Indices field value
// and a boolean to check if the value has been set.
func (o *Search1) GetIndicesOk() ([]Index, bool) {
	if o == nil {
		return nil, false
	}
	return o.Indices, true
}

// SetIndices sets field value
func (o *Search1) SetIndices(v []Index) {
	o.Indices = v
}

// GetQueryType returns the QueryType field value if set, zero value otherwise.
func (o *Search1) GetQueryType() QueryType {
	if o == nil || o.QueryType == nil {
		var ret QueryType
		return ret
	}
	return *o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetQueryTypeOk() (*QueryType, bool) {
	if o == nil || o.QueryType == nil {
		return nil, false
	}
	return o.QueryType, true
}

// HasQueryType returns a boolean if a field has been set.
func (o *Search1) HasQueryType() bool {
	if o != nil && o.QueryType != nil {
		return true
	}

	return false
}

// SetQueryType gets a reference to the given QueryType and assigns it to the QueryType field.
func (o *Search1) SetQueryType(v QueryType) {
	o.QueryType = &v
}

// GetQueryVersion returns the QueryVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Search1) GetQueryVersion() string {
	if o == nil || o.QueryVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.QueryVersion.Get()
}

// GetQueryVersionOk returns a tuple with the QueryVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Search1) GetQueryVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.QueryVersion.Get(), o.QueryVersion.IsSet()
}

// HasQueryVersion returns a boolean if a field has been set.
func (o *Search1) HasQueryVersion() bool {
	if o != nil && o.QueryVersion.IsSet() {
		return true
	}

	return false
}

// SetQueryVersion gets a reference to the given NullableString and assigns it to the QueryVersion field.
func (o *Search1) SetQueryVersion(v string) {
	o.QueryVersion.Set(&v)
}
// SetQueryVersionNil sets the value for QueryVersion to be an explicit nil
func (o *Search1) SetQueryVersionNil() {
	o.QueryVersion.Set(nil)
}

// UnsetQueryVersion ensures that no value is present for QueryVersion, not even an explicit nil
func (o *Search1) UnsetQueryVersion() {
	o.QueryVersion.Unset()
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Search1) GetQuery() Query {
	if o == nil || o.Query == nil {
		var ret Query
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetQueryOk() (*Query, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Search1) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given Query and assigns it to the Query field.
func (o *Search1) SetQuery(v Query) {
	o.Query = &v
}

// GetQueryDsl returns the QueryDsl field value if set, zero value otherwise.
func (o *Search1) GetQueryDsl() map[string]interface{} {
	if o == nil || o.QueryDsl == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.QueryDsl
}

// GetQueryDslOk returns a tuple with the QueryDsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetQueryDslOk() (map[string]interface{}, bool) {
	if o == nil || o.QueryDsl == nil {
		return nil, false
	}
	return o.QueryDsl, true
}

// HasQueryDsl returns a boolean if a field has been set.
func (o *Search1) HasQueryDsl() bool {
	if o != nil && o.QueryDsl != nil {
		return true
	}

	return false
}

// SetQueryDsl gets a reference to the given map[string]interface{} and assigns it to the QueryDsl field.
func (o *Search1) SetQueryDsl(v map[string]interface{}) {
	o.QueryDsl = v
}

// GetTypeAheadQuery returns the TypeAheadQuery field value if set, zero value otherwise.
func (o *Search1) GetTypeAheadQuery() TypeAheadQuery {
	if o == nil || o.TypeAheadQuery == nil {
		var ret TypeAheadQuery
		return ret
	}
	return *o.TypeAheadQuery
}

// GetTypeAheadQueryOk returns a tuple with the TypeAheadQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetTypeAheadQueryOk() (*TypeAheadQuery, bool) {
	if o == nil || o.TypeAheadQuery == nil {
		return nil, false
	}
	return o.TypeAheadQuery, true
}

// HasTypeAheadQuery returns a boolean if a field has been set.
func (o *Search1) HasTypeAheadQuery() bool {
	if o != nil && o.TypeAheadQuery != nil {
		return true
	}

	return false
}

// SetTypeAheadQuery gets a reference to the given TypeAheadQuery and assigns it to the TypeAheadQuery field.
func (o *Search1) SetTypeAheadQuery(v TypeAheadQuery) {
	o.TypeAheadQuery = &v
}

// GetIncludeNested returns the IncludeNested field value if set, zero value otherwise.
func (o *Search1) GetIncludeNested() bool {
	if o == nil || o.IncludeNested == nil {
		var ret bool
		return ret
	}
	return *o.IncludeNested
}

// GetIncludeNestedOk returns a tuple with the IncludeNested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetIncludeNestedOk() (*bool, bool) {
	if o == nil || o.IncludeNested == nil {
		return nil, false
	}
	return o.IncludeNested, true
}

// HasIncludeNested returns a boolean if a field has been set.
func (o *Search1) HasIncludeNested() bool {
	if o != nil && o.IncludeNested != nil {
		return true
	}

	return false
}

// SetIncludeNested gets a reference to the given bool and assigns it to the IncludeNested field.
func (o *Search1) SetIncludeNested(v bool) {
	o.IncludeNested = &v
}

// GetQueryResultFilter returns the QueryResultFilter field value if set, zero value otherwise.
func (o *Search1) GetQueryResultFilter() QueryResultFilter {
	if o == nil || o.QueryResultFilter == nil {
		var ret QueryResultFilter
		return ret
	}
	return *o.QueryResultFilter
}

// GetQueryResultFilterOk returns a tuple with the QueryResultFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetQueryResultFilterOk() (*QueryResultFilter, bool) {
	if o == nil || o.QueryResultFilter == nil {
		return nil, false
	}
	return o.QueryResultFilter, true
}

// HasQueryResultFilter returns a boolean if a field has been set.
func (o *Search1) HasQueryResultFilter() bool {
	if o != nil && o.QueryResultFilter != nil {
		return true
	}

	return false
}

// SetQueryResultFilter gets a reference to the given QueryResultFilter and assigns it to the QueryResultFilter field.
func (o *Search1) SetQueryResultFilter(v QueryResultFilter) {
	o.QueryResultFilter = &v
}

// GetAggregationType returns the AggregationType field value if set, zero value otherwise.
func (o *Search1) GetAggregationType() AggregationType {
	if o == nil || o.AggregationType == nil {
		var ret AggregationType
		return ret
	}
	return *o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetAggregationTypeOk() (*AggregationType, bool) {
	if o == nil || o.AggregationType == nil {
		return nil, false
	}
	return o.AggregationType, true
}

// HasAggregationType returns a boolean if a field has been set.
func (o *Search1) HasAggregationType() bool {
	if o != nil && o.AggregationType != nil {
		return true
	}

	return false
}

// SetAggregationType gets a reference to the given AggregationType and assigns it to the AggregationType field.
func (o *Search1) SetAggregationType(v AggregationType) {
	o.AggregationType = &v
}

// GetAggregationsVersion returns the AggregationsVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Search1) GetAggregationsVersion() string {
	if o == nil || o.AggregationsVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.AggregationsVersion.Get()
}

// GetAggregationsVersionOk returns a tuple with the AggregationsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Search1) GetAggregationsVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AggregationsVersion.Get(), o.AggregationsVersion.IsSet()
}

// HasAggregationsVersion returns a boolean if a field has been set.
func (o *Search1) HasAggregationsVersion() bool {
	if o != nil && o.AggregationsVersion.IsSet() {
		return true
	}

	return false
}

// SetAggregationsVersion gets a reference to the given NullableString and assigns it to the AggregationsVersion field.
func (o *Search1) SetAggregationsVersion(v string) {
	o.AggregationsVersion.Set(&v)
}
// SetAggregationsVersionNil sets the value for AggregationsVersion to be an explicit nil
func (o *Search1) SetAggregationsVersionNil() {
	o.AggregationsVersion.Set(nil)
}

// UnsetAggregationsVersion ensures that no value is present for AggregationsVersion, not even an explicit nil
func (o *Search1) UnsetAggregationsVersion() {
	o.AggregationsVersion.Unset()
}

// GetAggregationsDsl returns the AggregationsDsl field value if set, zero value otherwise.
func (o *Search1) GetAggregationsDsl() map[string]interface{} {
	if o == nil || o.AggregationsDsl == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AggregationsDsl
}

// GetAggregationsDslOk returns a tuple with the AggregationsDsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetAggregationsDslOk() (map[string]interface{}, bool) {
	if o == nil || o.AggregationsDsl == nil {
		return nil, false
	}
	return o.AggregationsDsl, true
}

// HasAggregationsDsl returns a boolean if a field has been set.
func (o *Search1) HasAggregationsDsl() bool {
	if o != nil && o.AggregationsDsl != nil {
		return true
	}

	return false
}

// SetAggregationsDsl gets a reference to the given map[string]interface{} and assigns it to the AggregationsDsl field.
func (o *Search1) SetAggregationsDsl(v map[string]interface{}) {
	o.AggregationsDsl = v
}

// GetAggregations returns the Aggregations field value if set, zero value otherwise.
func (o *Search1) GetAggregations() Aggregation1 {
	if o == nil || o.Aggregations == nil {
		var ret Aggregation1
		return ret
	}
	return *o.Aggregations
}

// GetAggregationsOk returns a tuple with the Aggregations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetAggregationsOk() (*Aggregation1, bool) {
	if o == nil || o.Aggregations == nil {
		return nil, false
	}
	return o.Aggregations, true
}

// HasAggregations returns a boolean if a field has been set.
func (o *Search1) HasAggregations() bool {
	if o != nil && o.Aggregations != nil {
		return true
	}

	return false
}

// SetAggregations gets a reference to the given Aggregation1 and assigns it to the Aggregations field.
func (o *Search1) SetAggregations(v Aggregation1) {
	o.Aggregations = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *Search1) GetSort() []string {
	if o == nil || o.Sort == nil {
		var ret []string
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetSortOk() ([]string, bool) {
	if o == nil || o.Sort == nil {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *Search1) HasSort() bool {
	if o != nil && o.Sort != nil {
		return true
	}

	return false
}

// SetSort gets a reference to the given []string and assigns it to the Sort field.
func (o *Search1) SetSort(v []string) {
	o.Sort = v
}

// GetSearchAfter returns the SearchAfter field value if set, zero value otherwise.
func (o *Search1) GetSearchAfter() []string {
	if o == nil || o.SearchAfter == nil {
		var ret []string
		return ret
	}
	return o.SearchAfter
}

// GetSearchAfterOk returns a tuple with the SearchAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetSearchAfterOk() ([]string, bool) {
	if o == nil || o.SearchAfter == nil {
		return nil, false
	}
	return o.SearchAfter, true
}

// HasSearchAfter returns a boolean if a field has been set.
func (o *Search1) HasSearchAfter() bool {
	if o != nil && o.SearchAfter != nil {
		return true
	}

	return false
}

// SetSearchAfter gets a reference to the given []string and assigns it to the SearchAfter field.
func (o *Search1) SetSearchAfter(v []string) {
	o.SearchAfter = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *Search1) GetFilters() map[string]Filter {
	if o == nil || o.Filters == nil {
		var ret map[string]Filter
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search1) GetFiltersOk() (*map[string]Filter, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *Search1) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given map[string]Filter and assigns it to the Filters field.
func (o *Search1) SetFilters(v map[string]Filter) {
	o.Filters = &v
}

func (o Search1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["indices"] = o.Indices
	}
	if o.QueryType != nil {
		toSerialize["queryType"] = o.QueryType
	}
	if o.QueryVersion.IsSet() {
		toSerialize["queryVersion"] = o.QueryVersion.Get()
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.QueryDsl != nil {
		toSerialize["queryDsl"] = o.QueryDsl
	}
	if o.TypeAheadQuery != nil {
		toSerialize["typeAheadQuery"] = o.TypeAheadQuery
	}
	if o.IncludeNested != nil {
		toSerialize["includeNested"] = o.IncludeNested
	}
	if o.QueryResultFilter != nil {
		toSerialize["queryResultFilter"] = o.QueryResultFilter
	}
	if o.AggregationType != nil {
		toSerialize["aggregationType"] = o.AggregationType
	}
	if o.AggregationsVersion.IsSet() {
		toSerialize["aggregationsVersion"] = o.AggregationsVersion.Get()
	}
	if o.AggregationsDsl != nil {
		toSerialize["aggregationsDsl"] = o.AggregationsDsl
	}
	if o.Aggregations != nil {
		toSerialize["aggregations"] = o.Aggregations
	}
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	if o.SearchAfter != nil {
		toSerialize["searchAfter"] = o.SearchAfter
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Search1) UnmarshalJSON(bytes []byte) (err error) {
	varSearch1 := _Search1{}

	if err = json.Unmarshal(bytes, &varSearch1); err == nil {
		*o = Search1(varSearch1)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "indices")
		delete(additionalProperties, "queryType")
		delete(additionalProperties, "queryVersion")
		delete(additionalProperties, "query")
		delete(additionalProperties, "queryDsl")
		delete(additionalProperties, "typeAheadQuery")
		delete(additionalProperties, "includeNested")
		delete(additionalProperties, "queryResultFilter")
		delete(additionalProperties, "aggregationType")
		delete(additionalProperties, "aggregationsVersion")
		delete(additionalProperties, "aggregationsDsl")
		delete(additionalProperties, "aggregations")
		delete(additionalProperties, "sort")
		delete(additionalProperties, "searchAfter")
		delete(additionalProperties, "filters")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearch1 struct {
	value *Search1
	isSet bool
}

func (v NullableSearch1) Get() *Search1 {
	return v.value
}

func (v *NullableSearch1) Set(val *Search1) {
	v.value = val
	v.isSet = true
}

func (v NullableSearch1) IsSet() bool {
	return v.isSet
}

func (v *NullableSearch1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearch1(val *Search1) *NullableSearch1 {
	return &NullableSearch1{value: val, isSet: true}
}

func (v NullableSearch1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearch1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


