/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// IdentityProfile struct for IdentityProfile
type IdentityProfile struct {
	Type *DtoType `json:"type,omitempty"`
	// ID of the object to which this reference applies
	Id *string `json:"id,omitempty"`
	// Human-readable display name of the object to which this reference applies
	Name *string `json:"name,omitempty"`
	// The description of the Identity Profile.
	Description *string `json:"description,omitempty"`
	Owner *BaseReferenceDto `json:"owner,omitempty"`
	// The priority for an Identity Profile.
	Priority *int64 `json:"priority,omitempty"`
	AuthoritativeSource *IdentityProfileAllOfAuthoritativeSource `json:"authoritativeSource,omitempty"`
	// True if a identity refresh is needed. Typically triggered when a change on the source has been made.
	IdentityRefreshRequired *bool `json:"identityRefreshRequired,omitempty"`
	// The number of identities that belong to the Identity Profile.
	IdentityCount *int32 `json:"identityCount,omitempty"`
	IdentityAttributeConfig *IdentityAttributeConfig `json:"identityAttributeConfig,omitempty"`
	IdentityExceptionReportReference *IdentityExceptionReportReference `json:"identityExceptionReportReference,omitempty"`
	// Indicates the value of requiresPeriodicRefresh attribute for the Identity Profile.
	HasTimeBasedAttr *bool `json:"hasTimeBasedAttr,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityProfile IdentityProfile

// NewIdentityProfile instantiates a new IdentityProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityProfile() *IdentityProfile {
	this := IdentityProfile{}
	return &this
}

// NewIdentityProfileWithDefaults instantiates a new IdentityProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityProfileWithDefaults() *IdentityProfile {
	this := IdentityProfile{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IdentityProfile) GetType() DtoType {
	if o == nil || o.Type == nil {
		var ret DtoType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetTypeOk() (*DtoType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IdentityProfile) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given DtoType and assigns it to the Type field.
func (o *IdentityProfile) SetType(v DtoType) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdentityProfile) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdentityProfile) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IdentityProfile) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdentityProfile) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdentityProfile) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdentityProfile) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IdentityProfile) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IdentityProfile) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IdentityProfile) SetDescription(v string) {
	o.Description = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *IdentityProfile) GetOwner() BaseReferenceDto {
	if o == nil || o.Owner == nil {
		var ret BaseReferenceDto
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetOwnerOk() (*BaseReferenceDto, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *IdentityProfile) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given BaseReferenceDto and assigns it to the Owner field.
func (o *IdentityProfile) SetOwner(v BaseReferenceDto) {
	o.Owner = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *IdentityProfile) GetPriority() int64 {
	if o == nil || o.Priority == nil {
		var ret int64
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetPriorityOk() (*int64, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *IdentityProfile) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int64 and assigns it to the Priority field.
func (o *IdentityProfile) SetPriority(v int64) {
	o.Priority = &v
}

// GetAuthoritativeSource returns the AuthoritativeSource field value if set, zero value otherwise.
func (o *IdentityProfile) GetAuthoritativeSource() IdentityProfileAllOfAuthoritativeSource {
	if o == nil || o.AuthoritativeSource == nil {
		var ret IdentityProfileAllOfAuthoritativeSource
		return ret
	}
	return *o.AuthoritativeSource
}

// GetAuthoritativeSourceOk returns a tuple with the AuthoritativeSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetAuthoritativeSourceOk() (*IdentityProfileAllOfAuthoritativeSource, bool) {
	if o == nil || o.AuthoritativeSource == nil {
		return nil, false
	}
	return o.AuthoritativeSource, true
}

// HasAuthoritativeSource returns a boolean if a field has been set.
func (o *IdentityProfile) HasAuthoritativeSource() bool {
	if o != nil && o.AuthoritativeSource != nil {
		return true
	}

	return false
}

// SetAuthoritativeSource gets a reference to the given IdentityProfileAllOfAuthoritativeSource and assigns it to the AuthoritativeSource field.
func (o *IdentityProfile) SetAuthoritativeSource(v IdentityProfileAllOfAuthoritativeSource) {
	o.AuthoritativeSource = &v
}

// GetIdentityRefreshRequired returns the IdentityRefreshRequired field value if set, zero value otherwise.
func (o *IdentityProfile) GetIdentityRefreshRequired() bool {
	if o == nil || o.IdentityRefreshRequired == nil {
		var ret bool
		return ret
	}
	return *o.IdentityRefreshRequired
}

// GetIdentityRefreshRequiredOk returns a tuple with the IdentityRefreshRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetIdentityRefreshRequiredOk() (*bool, bool) {
	if o == nil || o.IdentityRefreshRequired == nil {
		return nil, false
	}
	return o.IdentityRefreshRequired, true
}

// HasIdentityRefreshRequired returns a boolean if a field has been set.
func (o *IdentityProfile) HasIdentityRefreshRequired() bool {
	if o != nil && o.IdentityRefreshRequired != nil {
		return true
	}

	return false
}

// SetIdentityRefreshRequired gets a reference to the given bool and assigns it to the IdentityRefreshRequired field.
func (o *IdentityProfile) SetIdentityRefreshRequired(v bool) {
	o.IdentityRefreshRequired = &v
}

// GetIdentityCount returns the IdentityCount field value if set, zero value otherwise.
func (o *IdentityProfile) GetIdentityCount() int32 {
	if o == nil || o.IdentityCount == nil {
		var ret int32
		return ret
	}
	return *o.IdentityCount
}

// GetIdentityCountOk returns a tuple with the IdentityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetIdentityCountOk() (*int32, bool) {
	if o == nil || o.IdentityCount == nil {
		return nil, false
	}
	return o.IdentityCount, true
}

// HasIdentityCount returns a boolean if a field has been set.
func (o *IdentityProfile) HasIdentityCount() bool {
	if o != nil && o.IdentityCount != nil {
		return true
	}

	return false
}

// SetIdentityCount gets a reference to the given int32 and assigns it to the IdentityCount field.
func (o *IdentityProfile) SetIdentityCount(v int32) {
	o.IdentityCount = &v
}

// GetIdentityAttributeConfig returns the IdentityAttributeConfig field value if set, zero value otherwise.
func (o *IdentityProfile) GetIdentityAttributeConfig() IdentityAttributeConfig {
	if o == nil || o.IdentityAttributeConfig == nil {
		var ret IdentityAttributeConfig
		return ret
	}
	return *o.IdentityAttributeConfig
}

// GetIdentityAttributeConfigOk returns a tuple with the IdentityAttributeConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetIdentityAttributeConfigOk() (*IdentityAttributeConfig, bool) {
	if o == nil || o.IdentityAttributeConfig == nil {
		return nil, false
	}
	return o.IdentityAttributeConfig, true
}

// HasIdentityAttributeConfig returns a boolean if a field has been set.
func (o *IdentityProfile) HasIdentityAttributeConfig() bool {
	if o != nil && o.IdentityAttributeConfig != nil {
		return true
	}

	return false
}

// SetIdentityAttributeConfig gets a reference to the given IdentityAttributeConfig and assigns it to the IdentityAttributeConfig field.
func (o *IdentityProfile) SetIdentityAttributeConfig(v IdentityAttributeConfig) {
	o.IdentityAttributeConfig = &v
}

// GetIdentityExceptionReportReference returns the IdentityExceptionReportReference field value if set, zero value otherwise.
func (o *IdentityProfile) GetIdentityExceptionReportReference() IdentityExceptionReportReference {
	if o == nil || o.IdentityExceptionReportReference == nil {
		var ret IdentityExceptionReportReference
		return ret
	}
	return *o.IdentityExceptionReportReference
}

// GetIdentityExceptionReportReferenceOk returns a tuple with the IdentityExceptionReportReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetIdentityExceptionReportReferenceOk() (*IdentityExceptionReportReference, bool) {
	if o == nil || o.IdentityExceptionReportReference == nil {
		return nil, false
	}
	return o.IdentityExceptionReportReference, true
}

// HasIdentityExceptionReportReference returns a boolean if a field has been set.
func (o *IdentityProfile) HasIdentityExceptionReportReference() bool {
	if o != nil && o.IdentityExceptionReportReference != nil {
		return true
	}

	return false
}

// SetIdentityExceptionReportReference gets a reference to the given IdentityExceptionReportReference and assigns it to the IdentityExceptionReportReference field.
func (o *IdentityProfile) SetIdentityExceptionReportReference(v IdentityExceptionReportReference) {
	o.IdentityExceptionReportReference = &v
}

// GetHasTimeBasedAttr returns the HasTimeBasedAttr field value if set, zero value otherwise.
func (o *IdentityProfile) GetHasTimeBasedAttr() bool {
	if o == nil || o.HasTimeBasedAttr == nil {
		var ret bool
		return ret
	}
	return *o.HasTimeBasedAttr
}

// GetHasTimeBasedAttrOk returns a tuple with the HasTimeBasedAttr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProfile) GetHasTimeBasedAttrOk() (*bool, bool) {
	if o == nil || o.HasTimeBasedAttr == nil {
		return nil, false
	}
	return o.HasTimeBasedAttr, true
}

// HasHasTimeBasedAttr returns a boolean if a field has been set.
func (o *IdentityProfile) HasHasTimeBasedAttr() bool {
	if o != nil && o.HasTimeBasedAttr != nil {
		return true
	}

	return false
}

// SetHasTimeBasedAttr gets a reference to the given bool and assigns it to the HasTimeBasedAttr field.
func (o *IdentityProfile) SetHasTimeBasedAttr(v bool) {
	o.HasTimeBasedAttr = &v
}

func (o IdentityProfile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.AuthoritativeSource != nil {
		toSerialize["authoritativeSource"] = o.AuthoritativeSource
	}
	if o.IdentityRefreshRequired != nil {
		toSerialize["identityRefreshRequired"] = o.IdentityRefreshRequired
	}
	if o.IdentityCount != nil {
		toSerialize["identityCount"] = o.IdentityCount
	}
	if o.IdentityAttributeConfig != nil {
		toSerialize["identityAttributeConfig"] = o.IdentityAttributeConfig
	}
	if o.IdentityExceptionReportReference != nil {
		toSerialize["identityExceptionReportReference"] = o.IdentityExceptionReportReference
	}
	if o.HasTimeBasedAttr != nil {
		toSerialize["hasTimeBasedAttr"] = o.HasTimeBasedAttr
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IdentityProfile) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityProfile := _IdentityProfile{}

	if err = json.Unmarshal(bytes, &varIdentityProfile); err == nil {
		*o = IdentityProfile(varIdentityProfile)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "authoritativeSource")
		delete(additionalProperties, "identityRefreshRequired")
		delete(additionalProperties, "identityCount")
		delete(additionalProperties, "identityAttributeConfig")
		delete(additionalProperties, "identityExceptionReportReference")
		delete(additionalProperties, "hasTimeBasedAttr")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityProfile struct {
	value *IdentityProfile
	isSet bool
}

func (v NullableIdentityProfile) Get() *IdentityProfile {
	return v.value
}

func (v *NullableIdentityProfile) Set(val *IdentityProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProfile(val *IdentityProfile) *NullableIdentityProfile {
	return &NullableIdentityProfile{value: val, isSet: true}
}

func (v NullableIdentityProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


